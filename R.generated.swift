//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Dark Blue`.
    static let darkBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dark Blue")
    /// Color `Light Blue`.
    static let lightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Light Blue")
    /// Color `Sub Blue`.
    static let subBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Sub Blue")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Dark Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Light Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Sub Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Dark Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Light Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Sub Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subBlue.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 191 images.
  struct image {
    /// Image `Add24`.
    static let add24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add24")
    /// Image `AddIcon`.
    static let addIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddIcon")
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `Check24`.
    static let check24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check24")
    /// Image `Home24`.
    static let home24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home24")
    /// Image `KafakIcon`.
    static let kafakIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "KafakIcon")
    /// Image `No_Image_Available`.
    static let no_Image_Available = Rswift.ImageResource(bundle: R.hostingBundle, name: "No_Image_Available")
    /// Image `Notify24`.
    static let notify24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notify24")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `Setting24`.
    static let setting24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Setting24")
    /// Image `TransWallet18`.
    static let transWallet18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransWallet18")
    /// Image `TransWallet`.
    static let transWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransWallet")
    /// Image `aboutimg`.
    static let aboutimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutimg")
    /// Image `addimage`.
    static let addimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "addimage")
    /// Image `addimagenew1`.
    static let addimagenew1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "addimagenew1")
    /// Image `addratingmoney_ic`.
    static let addratingmoney_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "addratingmoney_ic")
    /// Image `amico`.
    static let amico = Rswift.ImageResource(bundle: R.hostingBundle, name: "amico")
    /// Image `app_icon`.
    static let app_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_icon")
    /// Image `arrow_green_up`.
    static let arrow_green_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_green_up")
    /// Image `arrow_red_down`.
    static let arrow_red_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_red_down")
    /// Image `attachnew`.
    static let attachnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachnew")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `banner1`.
    static let banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner1")
    /// Image `black_back`.
    static let black_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_back")
    /// Image `black_profile`.
    static let black_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_profile")
    /// Image `brick`.
    static let brick = Rswift.ImageResource(bundle: R.hostingBundle, name: "brick")
    /// Image `cancelRed`.
    static let cancelRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelRed")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `carticon`.
    static let carticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "carticon")
    /// Image `cat1`.
    static let cat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat1")
    /// Image `cat2`.
    static let cat2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat2")
    /// Image `cat3`.
    static let cat3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat3")
    /// Image `cat4`.
    static let cat4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat4")
    /// Image `cat5`.
    static let cat5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat5")
    /// Image `cat6`.
    static let cat6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat6")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `chatnew12`.
    static let chatnew12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatnew12")
    /// Image `check_new_selected`.
    static let check_new_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_new_selected")
    /// Image `check_new_unselected`.
    static let check_new_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_new_unselected")
    /// Image `checked_new1`.
    static let checked_new1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked_new1")
    /// Image `checked_new`.
    static let checked_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked_new")
    /// Image `circle_back`.
    static let circle_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_back")
    /// Image `coperpipe`.
    static let coperpipe = Rswift.ImageResource(bundle: R.hostingBundle, name: "coperpipe")
    /// Image `cotwoavoid_ic`.
    static let cotwoavoid_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "cotwoavoid_ic")
    /// Image `cpvc`.
    static let cpvc = Rswift.ImageResource(bundle: R.hostingBundle, name: "cpvc")
    /// Image `crossicon`.
    static let crossicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "crossicon")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `discount_food_big_img`.
    static let discount_food_big_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount_food_big_img")
    /// Image `discountimg2`.
    static let discountimg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "discountimg2")
    /// Image `downarow`.
    static let downarow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarow")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `editpronew`.
    static let editpronew = Rswift.ImageResource(bundle: R.hostingBundle, name: "editpronew")
    /// Image `empty_cart`.
    static let empty_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_cart")
    /// Image `empty_notification`.
    static let empty_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_notification")
    /// Image `empty_transaction`.
    static let empty_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_transaction")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `fav_active`.
    static let fav_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_active")
    /// Image `fav_deactive`.
    static let fav_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_deactive")
    /// Image `fav_selected`.
    static let fav_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_selected")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `favorite`.
    static let favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `food_details`.
    static let food_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_details")
    /// Image `foodimg`.
    static let foodimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodimg")
    /// Image `forward_ic`.
    static let forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "forward_ic")
    /// Image `googleplus`.
    static let googleplus = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleplus")
    /// Image `grey_call`.
    static let grey_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_call")
    /// Image `grey_icon`.
    static let grey_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_icon")
    /// Image `grey_round_edge_back`.
    static let grey_round_edge_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_round_edge_back")
    /// Image `greyblackback`.
    static let greyblackback = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyblackback")
    /// Image `greyclock`.
    static let greyclock = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyclock")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `helpnew`.
    static let helpnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpnew")
    /// Image `historynew`.
    static let historynew = Rswift.ImageResource(bundle: R.hostingBundle, name: "historynew")
    /// Image `home_active`.
    static let home_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_active")
    /// Image `home_deactive`.
    static let home_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_deactive")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_forward`.
    static let ic_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_forward")
    /// Image `ic_pin1`.
    static let ic_pin1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pin1")
    /// Image `ic_pin2`.
    static let ic_pin2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pin2")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `imageuploadicon`.
    static let imageuploadicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageuploadicon")
    /// Image `invitefriend_big_ic`.
    static let invitefriend_big_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend_big_ic")
    /// Image `invitefriend`.
    static let invitefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `location_grey`.
    static let location_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_grey")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logobackgrey`.
    static let logobackgrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "logobackgrey")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `logoutnew`.
    static let logoutnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoutnew")
    /// Image `macdonladicon`.
    static let macdonladicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "macdonladicon")
    /// Image `magic_bag2`.
    static let magic_bag2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic_bag2")
    /// Image `magic_bag_big_image`.
    static let magic_bag_big_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic_bag_big_image")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `mapi`.
    static let mapi = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapi")
    /// Image `mapimg`.
    static let mapimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapimg")
    /// Image `mastercard`.
    static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `minusnew`.
    static let minusnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "minusnew")
    /// Image `mobilei`.
    static let mobilei = Rswift.ImageResource(bundle: R.hostingBundle, name: "mobilei")
    /// Image `money_saved`.
    static let money_saved = Rswift.ImageResource(bundle: R.hostingBundle, name: "money_saved")
    /// Image `moneysaved_ic`.
    static let moneysaved_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "moneysaved_ic")
    /// Image `mycart`.
    static let mycart = Rswift.ImageResource(bundle: R.hostingBundle, name: "mycart")
    /// Image `myproductlist`.
    static let myproductlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "myproductlist")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `notiimage`.
    static let notiimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "notiimage")
    /// Image `order_active`.
    static let order_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_active")
    /// Image `order_deactive`.
    static let order_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_deactive")
    /// Image `pass`.
    static let pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `paymentright`.
    static let paymentright = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentright")
    /// Image `paymentsuccess`.
    static let paymentsuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentsuccess")
    /// Image `pexpipe`.
    static let pexpipe = Rswift.ImageResource(bundle: R.hostingBundle, name: "pexpipe")
    /// Image `pin_new1`.
    static let pin_new1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin_new1")
    /// Image `pin_new2`.
    static let pin_new2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin_new2")
    /// Image `pinone`.
    static let pinone = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinone")
    /// Image `pinthree`.
    static let pinthree = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinthree")
    /// Image `pintwo`.
    static let pintwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "pintwo")
    /// Image `pipe_rec`.
    static let pipe_rec = Rswift.ImageResource(bundle: R.hostingBundle, name: "pipe_rec")
    /// Image `pipe`.
    static let pipe = Rswift.ImageResource(bundle: R.hostingBundle, name: "pipe")
    /// Image `pipeshop`.
    static let pipeshop = Rswift.ImageResource(bundle: R.hostingBundle, name: "pipeshop")
    /// Image `plus1`.
    static let plus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus1")
    /// Image `plus_grey`.
    static let plus_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_grey")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `plusnew`.
    static let plusnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusnew")
    /// Image `privacy`.
    static let privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy")
    /// Image `profile_active`.
    static let profile_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_active")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `ratingbackground`.
    static let ratingbackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingbackground")
    /// Image `rest_image2`.
    static let rest_image2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rest_image2")
    /// Image `rest_image`.
    static let rest_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "rest_image")
    /// Image `reviewicon1`.
    static let reviewicon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "reviewicon1")
    /// Image `riversand1`.
    static let riversand1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "riversand1")
    /// Image `riversand2`.
    static let riversand2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "riversand2")
    /// Image `sand1`.
    static let sand1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sand1")
    /// Image `sand2`.
    static let sand2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sand2")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `searchfilm`.
    static let searchfilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchfilm")
    /// Image `sendbtnbg`.
    static let sendbtnbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendbtnbg")
    /// Image `sendnew`.
    static let sendnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendnew")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `sharenew`.
    static let sharenew = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharenew")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `spidrop`.
    static let spidrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "spidrop")
    /// Image `splash_back`.
    static let splash_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_back")
    /// Image `splashbg`.
    static let splashbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashbg")
    /// Image `star1`.
    static let star1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "star1")
    /// Image `storefilm`.
    static let storefilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "storefilm")
    /// Image `stripe`.
    static let stripe = Rswift.ImageResource(bundle: R.hostingBundle, name: "stripe")
    /// Image `success_order_img`.
    static let success_order_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "success_order_img")
    /// Image `tabbg`.
    static let tabbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbg")
    /// Image `termsofservice`.
    static let termsofservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "termsofservice")
    /// Image `toggle`.
    static let toggle = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggle")
    /// Image `toogleoff`.
    static let toogleoff = Rswift.ImageResource(bundle: R.hostingBundle, name: "toogleoff")
    /// Image `topup`.
    static let topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "topup")
    /// Image `topupsuccess_ic`.
    static let topupsuccess_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "topupsuccess_ic")
    /// Image `transpng`.
    static let transpng = Rswift.ImageResource(bundle: R.hostingBundle, name: "transpng")
    /// Image `truck1`.
    static let truck1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck1")
    /// Image `truck2`.
    static let truck2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck2")
    /// Image `truck3`.
    static let truck3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck3")
    /// Image `truck4`.
    static let truck4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck4")
    /// Image `truck5`.
    static let truck5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck5")
    /// Image `truck6`.
    static let truck6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck6")
    /// Image `trucknew`.
    static let trucknew = Rswift.ImageResource(bundle: R.hostingBundle, name: "trucknew")
    /// Image `unchecked_new1`.
    static let unchecked_new1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "unchecked_new1")
    /// Image `unchecked_new`.
    static let unchecked_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "unchecked_new")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `uploadimg_new`.
    static let uploadimg_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploadimg_new")
    /// Image `userdemoimg`.
    static let userdemoimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "userdemoimg")
    /// Image `useri`.
    static let useri = Rswift.ImageResource(bundle: R.hostingBundle, name: "useri")
    /// Image `view_eye`.
    static let view_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "view_eye")
    /// Image `view`.
    static let view = Rswift.ImageResource(bundle: R.hostingBundle, name: "view")
    /// Image `visa`.
    static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa")
    /// Image `wallet-add`.
    static let walletAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet-add")
    /// Image `wallet_back`.
    static let wallet_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_back")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `walleticon1`.
    static let walleticon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walleticon1")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `welcomeb`.
    static let welcomeb = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomeb")
    /// Image `welcomebg`.
    static let welcomebg = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomebg")
    /// Image `whitecart`.
    static let whitecart = Rswift.ImageResource(bundle: R.hostingBundle, name: "whitecart")
    /// Image `writetous_ic`.
    static let writetous_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "writetous_ic")
    /// Image `writetous`.
    static let writetous = Rswift.ImageResource(bundle: R.hostingBundle, name: "writetous")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add24", bundle: ..., traitCollection: ...)`
    static func add24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AddIcon", bundle: ..., traitCollection: ...)`
    static func addIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check24", bundle: ..., traitCollection: ...)`
    static func check24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home24", bundle: ..., traitCollection: ...)`
    static func home24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KafakIcon", bundle: ..., traitCollection: ...)`
    static func kafakIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kafakIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "No_Image_Available", bundle: ..., traitCollection: ...)`
    static func no_Image_Available(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_Image_Available, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notify24", bundle: ..., traitCollection: ...)`
    static func notify24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notify24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Setting24", bundle: ..., traitCollection: ...)`
    static func setting24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TransWallet", bundle: ..., traitCollection: ...)`
    static func transWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TransWallet18", bundle: ..., traitCollection: ...)`
    static func transWallet18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transWallet18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aboutimg", bundle: ..., traitCollection: ...)`
    static func aboutimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addimage", bundle: ..., traitCollection: ...)`
    static func addimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addimagenew1", bundle: ..., traitCollection: ...)`
    static func addimagenew1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addimagenew1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addratingmoney_ic", bundle: ..., traitCollection: ...)`
    static func addratingmoney_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addratingmoney_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amico", bundle: ..., traitCollection: ...)`
    static func amico(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amico, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_icon", bundle: ..., traitCollection: ...)`
    static func app_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_green_up", bundle: ..., traitCollection: ...)`
    static func arrow_green_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_green_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_red_down", bundle: ..., traitCollection: ...)`
    static func arrow_red_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_red_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "attachnew", bundle: ..., traitCollection: ...)`
    static func attachnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner1", bundle: ..., traitCollection: ...)`
    static func banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_back", bundle: ..., traitCollection: ...)`
    static func black_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_profile", bundle: ..., traitCollection: ...)`
    static func black_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brick", bundle: ..., traitCollection: ...)`
    static func brick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelRed", bundle: ..., traitCollection: ...)`
    static func cancelRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carticon", bundle: ..., traitCollection: ...)`
    static func carticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carticon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat1", bundle: ..., traitCollection: ...)`
    static func cat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat2", bundle: ..., traitCollection: ...)`
    static func cat2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat3", bundle: ..., traitCollection: ...)`
    static func cat3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat4", bundle: ..., traitCollection: ...)`
    static func cat4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat5", bundle: ..., traitCollection: ...)`
    static func cat5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat6", bundle: ..., traitCollection: ...)`
    static func cat6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatnew12", bundle: ..., traitCollection: ...)`
    static func chatnew12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatnew12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_new_selected", bundle: ..., traitCollection: ...)`
    static func check_new_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_new_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_new_unselected", bundle: ..., traitCollection: ...)`
    static func check_new_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_new_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checked_new", bundle: ..., traitCollection: ...)`
    static func checked_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checked_new1", bundle: ..., traitCollection: ...)`
    static func checked_new1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked_new1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle_back", bundle: ..., traitCollection: ...)`
    static func circle_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coperpipe", bundle: ..., traitCollection: ...)`
    static func coperpipe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coperpipe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cotwoavoid_ic", bundle: ..., traitCollection: ...)`
    static func cotwoavoid_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cotwoavoid_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cpvc", bundle: ..., traitCollection: ...)`
    static func cpvc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cpvc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crossicon", bundle: ..., traitCollection: ...)`
    static func crossicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount_food_big_img", bundle: ..., traitCollection: ...)`
    static func discount_food_big_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount_food_big_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discountimg2", bundle: ..., traitCollection: ...)`
    static func discountimg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discountimg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarow", bundle: ..., traitCollection: ...)`
    static func downarow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editpronew", bundle: ..., traitCollection: ...)`
    static func editpronew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editpronew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_cart", bundle: ..., traitCollection: ...)`
    static func empty_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_notification", bundle: ..., traitCollection: ...)`
    static func empty_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_transaction", bundle: ..., traitCollection: ...)`
    static func empty_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_transaction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_active", bundle: ..., traitCollection: ...)`
    static func fav_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_deactive", bundle: ..., traitCollection: ...)`
    static func fav_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_selected", bundle: ..., traitCollection: ...)`
    static func fav_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite", bundle: ..., traitCollection: ...)`
    static func favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_details", bundle: ..., traitCollection: ...)`
    static func food_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foodimg", bundle: ..., traitCollection: ...)`
    static func foodimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "forward_ic", bundle: ..., traitCollection: ...)`
    static func forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleplus", bundle: ..., traitCollection: ...)`
    static func googleplus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleplus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_call", bundle: ..., traitCollection: ...)`
    static func grey_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_icon", bundle: ..., traitCollection: ...)`
    static func grey_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_round_edge_back", bundle: ..., traitCollection: ...)`
    static func grey_round_edge_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_round_edge_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyblackback", bundle: ..., traitCollection: ...)`
    static func greyblackback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyblackback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyclock", bundle: ..., traitCollection: ...)`
    static func greyclock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyclock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpnew", bundle: ..., traitCollection: ...)`
    static func helpnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "historynew", bundle: ..., traitCollection: ...)`
    static func historynew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historynew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_active", bundle: ..., traitCollection: ...)`
    static func home_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_deactive", bundle: ..., traitCollection: ...)`
    static func home_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_forward", bundle: ..., traitCollection: ...)`
    static func ic_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pin1", bundle: ..., traitCollection: ...)`
    static func ic_pin1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pin1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pin2", bundle: ..., traitCollection: ...)`
    static func ic_pin2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pin2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "imageuploadicon", bundle: ..., traitCollection: ...)`
    static func imageuploadicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageuploadicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend", bundle: ..., traitCollection: ...)`
    static func invitefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend_big_ic", bundle: ..., traitCollection: ...)`
    static func invitefriend_big_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend_big_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_grey", bundle: ..., traitCollection: ...)`
    static func location_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logobackgrey", bundle: ..., traitCollection: ...)`
    static func logobackgrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logobackgrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoutnew", bundle: ..., traitCollection: ...)`
    static func logoutnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoutnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "macdonladicon", bundle: ..., traitCollection: ...)`
    static func macdonladicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.macdonladicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic_bag2", bundle: ..., traitCollection: ...)`
    static func magic_bag2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_bag2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic_bag_big_image", bundle: ..., traitCollection: ...)`
    static func magic_bag_big_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_bag_big_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapi", bundle: ..., traitCollection: ...)`
    static func mapi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapimg", bundle: ..., traitCollection: ...)`
    static func mapimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
    static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minusnew", bundle: ..., traitCollection: ...)`
    static func minusnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mobilei", bundle: ..., traitCollection: ...)`
    static func mobilei(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mobilei, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "money_saved", bundle: ..., traitCollection: ...)`
    static func money_saved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money_saved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moneysaved_ic", bundle: ..., traitCollection: ...)`
    static func moneysaved_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneysaved_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mycart", bundle: ..., traitCollection: ...)`
    static func mycart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mycart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myproductlist", bundle: ..., traitCollection: ...)`
    static func myproductlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myproductlist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notiimage", bundle: ..., traitCollection: ...)`
    static func notiimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notiimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_active", bundle: ..., traitCollection: ...)`
    static func order_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_deactive", bundle: ..., traitCollection: ...)`
    static func order_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pass", bundle: ..., traitCollection: ...)`
    static func pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentright", bundle: ..., traitCollection: ...)`
    static func paymentright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentright, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentsuccess", bundle: ..., traitCollection: ...)`
    static func paymentsuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentsuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pexpipe", bundle: ..., traitCollection: ...)`
    static func pexpipe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pexpipe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin_new1", bundle: ..., traitCollection: ...)`
    static func pin_new1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin_new1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin_new2", bundle: ..., traitCollection: ...)`
    static func pin_new2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin_new2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinone", bundle: ..., traitCollection: ...)`
    static func pinone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinthree", bundle: ..., traitCollection: ...)`
    static func pinthree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinthree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pintwo", bundle: ..., traitCollection: ...)`
    static func pintwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pintwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pipe", bundle: ..., traitCollection: ...)`
    static func pipe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pipe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pipe_rec", bundle: ..., traitCollection: ...)`
    static func pipe_rec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pipe_rec, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pipeshop", bundle: ..., traitCollection: ...)`
    static func pipeshop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pipeshop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus1", bundle: ..., traitCollection: ...)`
    static func plus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_grey", bundle: ..., traitCollection: ...)`
    static func plus_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusnew", bundle: ..., traitCollection: ...)`
    static func plusnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy", bundle: ..., traitCollection: ...)`
    static func privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_active", bundle: ..., traitCollection: ...)`
    static func profile_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ratingbackground", bundle: ..., traitCollection: ...)`
    static func ratingbackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingbackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rest_image", bundle: ..., traitCollection: ...)`
    static func rest_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rest_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rest_image2", bundle: ..., traitCollection: ...)`
    static func rest_image2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rest_image2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reviewicon1", bundle: ..., traitCollection: ...)`
    static func reviewicon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewicon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "riversand1", bundle: ..., traitCollection: ...)`
    static func riversand1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.riversand1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "riversand2", bundle: ..., traitCollection: ...)`
    static func riversand2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.riversand2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sand1", bundle: ..., traitCollection: ...)`
    static func sand1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sand1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sand2", bundle: ..., traitCollection: ...)`
    static func sand2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sand2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchfilm", bundle: ..., traitCollection: ...)`
    static func searchfilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchfilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendbtnbg", bundle: ..., traitCollection: ...)`
    static func sendbtnbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendbtnbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendnew", bundle: ..., traitCollection: ...)`
    static func sendnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharenew", bundle: ..., traitCollection: ...)`
    static func sharenew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharenew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spidrop", bundle: ..., traitCollection: ...)`
    static func spidrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spidrop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_back", bundle: ..., traitCollection: ...)`
    static func splash_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashbg", bundle: ..., traitCollection: ...)`
    static func splashbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star1", bundle: ..., traitCollection: ...)`
    static func star1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storefilm", bundle: ..., traitCollection: ...)`
    static func storefilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storefilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stripe", bundle: ..., traitCollection: ...)`
    static func stripe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stripe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "success_order_img", bundle: ..., traitCollection: ...)`
    static func success_order_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success_order_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbg", bundle: ..., traitCollection: ...)`
    static func tabbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termsofservice", bundle: ..., traitCollection: ...)`
    static func termsofservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsofservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toggle", bundle: ..., traitCollection: ...)`
    static func toggle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toogleoff", bundle: ..., traitCollection: ...)`
    static func toogleoff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toogleoff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topup", bundle: ..., traitCollection: ...)`
    static func topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topupsuccess_ic", bundle: ..., traitCollection: ...)`
    static func topupsuccess_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topupsuccess_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transpng", bundle: ..., traitCollection: ...)`
    static func transpng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transpng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck1", bundle: ..., traitCollection: ...)`
    static func truck1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck2", bundle: ..., traitCollection: ...)`
    static func truck2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck3", bundle: ..., traitCollection: ...)`
    static func truck3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck4", bundle: ..., traitCollection: ...)`
    static func truck4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck5", bundle: ..., traitCollection: ...)`
    static func truck5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck6", bundle: ..., traitCollection: ...)`
    static func truck6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trucknew", bundle: ..., traitCollection: ...)`
    static func trucknew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trucknew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unchecked_new", bundle: ..., traitCollection: ...)`
    static func unchecked_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unchecked_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unchecked_new1", bundle: ..., traitCollection: ...)`
    static func unchecked_new1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unchecked_new1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uploadimg_new", bundle: ..., traitCollection: ...)`
    static func uploadimg_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadimg_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userdemoimg", bundle: ..., traitCollection: ...)`
    static func userdemoimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userdemoimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "useri", bundle: ..., traitCollection: ...)`
    static func useri(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.useri, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view", bundle: ..., traitCollection: ...)`
    static func view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view_eye", bundle: ..., traitCollection: ...)`
    static func view_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view_eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
    static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet-add", bundle: ..., traitCollection: ...)`
    static func walletAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_back", bundle: ..., traitCollection: ...)`
    static func wallet_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walleticon1", bundle: ..., traitCollection: ...)`
    static func walleticon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walleticon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomeb", bundle: ..., traitCollection: ...)`
    static func welcomeb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomeb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomebg", bundle: ..., traitCollection: ...)`
    static func welcomebg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomebg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whitecart", bundle: ..., traitCollection: ...)`
    static func whitecart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whitecart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "writetous", bundle: ..., traitCollection: ...)`
    static func writetous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writetous, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "writetous_ic", bundle: ..., traitCollection: ...)`
    static func writetous_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writetous_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `CategoryCell`.
    static let categoryCell = _R.nib._CategoryCell()
    /// Nib `LandingCell`.
    static let landingCell = _R.nib._LandingCell()
    /// Nib `OrderDetailCell`.
    static let orderDetailCell = _R.nib._OrderDetailCell()
    /// Nib `ProductCell`.
    static let productCell = _R.nib._ProductCell()
    /// Nib `RatingReviewCell`.
    static let ratingReviewCell = _R.nib._RatingReviewCell()
    /// Nib `RequestCell`.
    static let requestCell = _R.nib._RequestCell()
    /// Nib `WithdrawCell`.
    static let withdrawCell = _R.nib._WithdrawCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCell) instead")
    static func categoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LandingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.landingCell) instead")
    static func landingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.landingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailCell) instead")
    static func orderDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCell) instead")
    static func productCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RatingReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ratingReviewCell) instead")
    static func ratingReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ratingReviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestCell) instead")
    static func requestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawCell) instead")
    static func withdrawCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawCell)
    }
    #endif

    static func categoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
      return R.nib.categoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
    }

    static func landingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LandingCell? {
      return R.nib.landingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandingCell
    }

    static func orderDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderDetailCell? {
      return R.nib.orderDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDetailCell
    }

    static func productCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
      return R.nib.productCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
    }

    static func ratingReviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RatingReviewCell? {
      return R.nib.ratingReviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RatingReviewCell
    }

    static func requestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestCell? {
      return R.nib.requestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestCell
    }

    static func withdrawCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawCell? {
      return R.nib.withdrawCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryCell`.
    static let categoryCell: Rswift.ReuseIdentifier<CategoryCell> = Rswift.ReuseIdentifier(identifier: "CategoryCell")
    /// Reuse identifier `LandingCell`.
    static let landingCell: Rswift.ReuseIdentifier<LandingCell> = Rswift.ReuseIdentifier(identifier: "LandingCell")
    /// Reuse identifier `OrderDetailCell`.
    static let orderDetailCell: Rswift.ReuseIdentifier<OrderDetailCell> = Rswift.ReuseIdentifier(identifier: "OrderDetailCell")
    /// Reuse identifier `ProductCell`.
    static let productCell: Rswift.ReuseIdentifier<ProductCell> = Rswift.ReuseIdentifier(identifier: "ProductCell")
    /// Reuse identifier `RatingReviewCell`.
    static let ratingReviewCell: Rswift.ReuseIdentifier<RatingReviewCell> = Rswift.ReuseIdentifier(identifier: "RatingReviewCell")
    /// Reuse identifier `RequestCell`.
    static let requestCell: Rswift.ReuseIdentifier<RequestCell> = Rswift.ReuseIdentifier(identifier: "RequestCell")
    /// Reuse identifier `WithdrawCell`.
    static let withdrawCell: Rswift.ReuseIdentifier<WithdrawCell> = Rswift.ReuseIdentifier(identifier: "WithdrawCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<PhotoCell> = Rswift.ReuseIdentifier(identifier: "cell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LandingCell.validate()
      try _OrderDetailCell.validate()
      try _ProductCell.validate()
      try _RatingReviewCell.validate()
      try _RequestCell.validate()
      try _WithdrawCell.validate()
    }

    struct _CategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoryCell

      let bundle = R.hostingBundle
      let identifier = "CategoryCell"
      let name = "CategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
      }

      fileprivate init() {}
    }

    struct _LandingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LandingCell

      let bundle = R.hostingBundle
      let identifier = "LandingCell"
      let name = "LandingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LandingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "amico", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'amico' is used in nib 'LandingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in nib 'LandingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OrderDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderDetailCell

      let bundle = R.hostingBundle
      let identifier = "OrderDetailCell"
      let name = "OrderDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "checked_new1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checked_new1' is used in nib 'OrderDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cpvc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cpvc' is used in nib 'OrderDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductCell

      let bundle = R.hostingBundle
      let identifier = "ProductCell"
      let name = "ProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "pipe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pipe' is used in nib 'ProductCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RatingReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RatingReviewCell

      let bundle = R.hostingBundle
      let identifier = "RatingReviewCell"
      let name = "RatingReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RatingReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RatingReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "userdemoimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userdemoimg' is used in nib 'RatingReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RequestCell

      let bundle = R.hostingBundle
      let identifier = "RequestCell"
      let name = "RequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chatnew12", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatnew12' is used in nib 'RequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pin1' is used in nib 'RequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pin2' is used in nib 'RequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userdemoimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userdemoimg' is used in nib 'RequestCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in nib 'RequestCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WithdrawCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WithdrawCell

      let bundle = R.hostingBundle
      let identifier = "WithdrawCell"
      let name = "WithdrawCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TransWallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransWallet' is used in nib 'WithdrawCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "KafakIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'KafakIcon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splashbg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashbg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let allProductVC = StoryboardViewControllerResource<AllProductVC>(identifier: "AllProductVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let helpVC = StoryboardViewControllerResource<HelpVC>(identifier: "HelpVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let landingVC = StoryboardViewControllerResource<LandingVC>(identifier: "LandingVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let myCategoriesVC = StoryboardViewControllerResource<MyCategoriesVC>(identifier: "MyCategoriesVC")
      let name = "Main"
      let orderDetailVC = StoryboardViewControllerResource<OrderDetailVC>(identifier: "OrderDetailVC")
      let orderRequestVC = StoryboardViewControllerResource<OrderRequestVC>(identifier: "OrderRequestVC")
      let presentProductAddedVC = StoryboardViewControllerResource<PresentProductAddedVC>(identifier: "PresentProductAddedVC")
      let productDetailVC = StoryboardViewControllerResource<ProductDetailVC>(identifier: "ProductDetailVC")
      let productVC = StoryboardViewControllerResource<ProductVC>(identifier: "ProductVC")
      let ratingReviewVC = StoryboardViewControllerResource<RatingReviewVC>(identifier: "RatingReviewVC")
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let storeDetailVC = StoryboardViewControllerResource<StoreDetailVC>(identifier: "StoreDetailVC")
      let storeTabBarVC = StoryboardViewControllerResource<StoreTabBarVC>(identifier: "StoreTabBarVC")
      let transactionVC = StoryboardViewControllerResource<TransactionVC>(identifier: "TransactionVC")

      func allProductVC(_: Void = ()) -> AllProductVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allProductVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func helpVC(_: Void = ()) -> HelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func landingVC(_: Void = ()) -> LandingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func myCategoriesVC(_: Void = ()) -> MyCategoriesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCategoriesVC)
      }

      func orderDetailVC(_: Void = ()) -> OrderDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailVC)
      }

      func orderRequestVC(_: Void = ()) -> OrderRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderRequestVC)
      }

      func presentProductAddedVC(_: Void = ()) -> PresentProductAddedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentProductAddedVC)
      }

      func productDetailVC(_: Void = ()) -> ProductDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailVC)
      }

      func productVC(_: Void = ()) -> ProductVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productVC)
      }

      func ratingReviewVC(_: Void = ()) -> RatingReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ratingReviewVC)
      }

      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      func storeDetailVC(_: Void = ()) -> StoreDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeDetailVC)
      }

      func storeTabBarVC(_: Void = ()) -> StoreTabBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeTabBarVC)
      }

      func transactionVC(_: Void = ()) -> TransactionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Check24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Check24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Setting24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Setting24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TransWallet18", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransWallet18' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancelRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancelRed' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.left' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "circle_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "crossicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'crossicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downarow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downarow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editpronew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editpronew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "helpnew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'helpnew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageuploadicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageuploadicon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logoutnew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoutnew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapi", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapi' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "myproductlist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'myproductlist' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pass' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paymentsuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paymentsuccess' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pipe_rec", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pipe_rec' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "reviewicon1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'reviewicon1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sharenew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sharenew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userdemoimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userdemoimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "useri", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'useri' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walleticon1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walleticon1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "writetous_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'writetous_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Light Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Light Blue' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().allProductVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allProductVC' could not be loaded from storyboard 'Main' as 'AllProductVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().helpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'Main' as 'HelpVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().landingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingVC' could not be loaded from storyboard 'Main' as 'LandingVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().myCategoriesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCategoriesVC' could not be loaded from storyboard 'Main' as 'MyCategoriesVC'.") }
        if _R.storyboard.main().orderDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailVC' could not be loaded from storyboard 'Main' as 'OrderDetailVC'.") }
        if _R.storyboard.main().orderRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderRequestVC' could not be loaded from storyboard 'Main' as 'OrderRequestVC'.") }
        if _R.storyboard.main().presentProductAddedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentProductAddedVC' could not be loaded from storyboard 'Main' as 'PresentProductAddedVC'.") }
        if _R.storyboard.main().productDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailVC' could not be loaded from storyboard 'Main' as 'ProductDetailVC'.") }
        if _R.storyboard.main().productVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productVC' could not be loaded from storyboard 'Main' as 'ProductVC'.") }
        if _R.storyboard.main().ratingReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ratingReviewVC' could not be loaded from storyboard 'Main' as 'RatingReviewVC'.") }
        if _R.storyboard.main().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Main' as 'SettingVC'.") }
        if _R.storyboard.main().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Main' as 'SignupVC'.") }
        if _R.storyboard.main().storeDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeDetailVC' could not be loaded from storyboard 'Main' as 'StoreDetailVC'.") }
        if _R.storyboard.main().storeTabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeTabBarVC' could not be loaded from storyboard 'Main' as 'StoreTabBarVC'.") }
        if _R.storyboard.main().transactionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionVC' could not be loaded from storyboard 'Main' as 'TransactionVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
